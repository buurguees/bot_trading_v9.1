# ü§ñ COMANDOS DEL SISTEMA - Bot Trading v9.1

## üöÄ **COMANDOS PRINCIPALES**

### **1. VALIDACI√ìN DEL SISTEMA**
```bash
# Validar configuraci√≥n YAML y detectar duplicados
python scripts/clean_yaml_duplicates.py

# Validar sistema de rewards completo
python scripts/validate_rewards_system.py

# Benchmark de rendimiento del sistema
python scripts/benchmark_rewards.py
```

### **2. ENTRENAMIENTO**
```bash
# Entrenamiento principal con PPO
python scripts/train_ppo.py

# Entrenamiento con monitoreo en tiempo real
python monitoring/monitor_training.py

# Iniciar entrenamiento (PowerShell)
.\monitoring\start_training.ps1
```

### **3. MODO AUTONOM√çA**
```bash
# Ejemplo de uso del modo autonom√≠a total
python scripts/example_autonomous_mode.py

# Crear entorno aut√≥nomo desde YAML
python -c "
from base_env.base_env import BaseTradingEnv
env = BaseTradingEnv.from_yaml_dir('config/', broker, oms)
"
```

### **4. DESARROLLO Y TESTING**
```bash
# Ejecutar pruebas unitarias
python -m pytest tests/unit/

# Ejecutar pruebas de integraci√≥n
python -m pytest tests/integration/

# Ejecutar pruebas end-to-end
python -m pytest tests/e2e/

# Verificar tipos con mypy
python -m mypy base_env/
```

## üîß **COMANDOS DE CONFIGURACI√ìN**

### **Configuraci√≥n YAML**
```bash
# Validar consistencia de configuraci√≥n
python -c "
from config.config_loader import validate_config
problems = validate_config('config/')
print(f'Problemas encontrados: {len(problems)}')
"

# Cargar configuraci√≥n y mostrar resumen
python -c "
from config.config_loader import get_config_summary
summary = get_config_summary('config/')
print(f'S√≠mbolo: {summary[\"symbol\"]}')
print(f'Modo: {summary[\"mode\"]}')
print(f'TFs: {summary[\"tfs\"]}')
"
```

### **Sistema de Rewards**
```bash
# Validar sistema de rewards
python -c "
from base_env.actions.reward_orchestrator_optimized import OptimizedRewardOrchestrator
orchestrator = OptimizedRewardOrchestrator('config/rewards_optimized.yaml')
print('‚úÖ Sistema de rewards funcionando')
"

# Probar m√≥dulos individuales
python -c "
from base_env.actions.time_efficiency_reward import TimeEfficiencyReward
from base_env.actions.reward_decomposition import RewardDecompositionNetwork
print('‚úÖ M√≥dulos de rewards funcionando')
"
```

## üìä **COMANDOS DE MONITOREO**

### **Rendimiento del Sistema**
```bash
# Monitorear acciones del sistema
python monitoring/monitor_actions.py

# Monitorear logs en tiempo real
python monitoring/monitor_logs.py

# Monitorear correcciones autom√°ticas
python monitoring/monitor_fixes.py
```

### **An√°lisis de Datos**
```bash
# Analizar progreso de entrenamiento
python -c "
from train_env.analysis.show_progress import show_training_progress
show_training_progress('models/BTCUSDT/')
"

# Verificar estado de modelos
python -c "
import os
models = os.listdir('models/')
print(f'Modelos disponibles: {models}')
"
```

## üõ†Ô∏è **COMANDOS DE MANTENIMIENTO**

### **Limpieza del Sistema**
```bash
# Limpiar logs antiguos
python -c "
import os
import shutil
if os.path.exists('logs/test_logs'):
    shutil.rmtree('logs/test_logs')
    print('‚úÖ Logs de prueba eliminados')
"

# Limpiar modelos temporales
python -c "
import os
import shutil
if os.path.exists('models/tmp'):
    shutil.rmtree('models/tmp')
    print('‚úÖ Modelos temporales eliminados')
"
```

## üîç **COMANDOS DE DEBUGGING**

### **Diagn√≥stico del Sistema**
```bash
# Verificar estado general del sistema
python -c "
import sys
import os
print(f'Python: {sys.version}')
print(f'Directorio actual: {os.getcwd()}')
print(f'Archivos en ra√≠z: {len([f for f in os.listdir(\".\") if os.path.isfile(f)])}')
"

# Verificar dependencias cr√≠ticas
python -c "
try:
    import torch
    print(f'‚úÖ PyTorch: {torch.__version__}')
except ImportError:
    print('‚ùå PyTorch no instalado')

try:
    import stable_baselines3
    print(f'‚úÖ SB3: {stable_baselines3.__version__}')
except ImportError:
    print('‚ùå Stable-Baselines3 no instalado')
"
```

## üìà **COMANDOS DE AN√ÅLISIS**

### **An√°lisis de Rendimiento**
```bash
# Analizar resultados de validaci√≥n
python -c "
import json
with open('archive/validation_results.json', 'r') as f:
    results = json.load(f)
print(f'Tests totales: {results[\"summary\"][\"total_tests\"]}')
print(f'Tests exitosos: {results[\"summary\"][\"passed_tests\"]}')
print(f'Tasa de √©xito: {results[\"summary\"][\"success_rate\"]:.1f}%')
"
```

## üö® **COMANDOS DE EMERGENCIA**

### **Recuperaci√≥n del Sistema**
```bash
# Reset completo del sistema
python -c "
import os
import shutil
# Limpiar logs
if os.path.exists('logs'):
    shutil.rmtree('logs')
    os.makedirs('logs')
# Limpiar modelos temporales
if os.path.exists('models/tmp'):
    shutil.rmtree('models/tmp')
print('‚úÖ Sistema reseteado')
"

# Verificar integridad de archivos cr√≠ticos
python -c "
import os
critical_files = [
    'app.py',
    'requirements.txt',
    'config/settings.yaml',
    'config/train.yaml',
    'base_env/base_env.py'
]
for file in critical_files:
    if os.path.exists(file):
        print(f'‚úÖ {file}')
    else:
        print(f'‚ùå {file} FALTANTE')
"
```

## üéØ **COMANDOS R√ÅPIDOS**

### **Inicio R√°pido**
```bash
# Validar y entrenar en un comando
python scripts/clean_yaml_duplicates.py && python scripts/validate_rewards_system.py && python scripts/train_ppo.py

# Modo autonom√≠a completo
python scripts/example_autonomous_mode.py

# Benchmark completo
python scripts/benchmark_rewards.py
```

### **Comandos de Desarrollo**
```bash
# Test r√°pido del sistema
python -c "
from base_env.base_env import BaseTradingEnv
from config.config_loader import load_config
print('‚úÖ Sistema funcionando correctamente')
"

# Verificar optimizaciones
python -c "
from base_env.actions.rewards_utils import get_all_utils
utils = get_all_utils()
print(f'‚úÖ {len(utils)} utilidades cargadas')
"
```

---

## üìö **NOTAS IMPORTANTES**

1. **Siempre validar** la configuraci√≥n antes de entrenar
2. **Usar modo autonom√≠a** para m√°xima flexibilidad
3. **Monitorear el rendimiento** durante entrenamientos largos
4. **Hacer backup** de configuraciones importantes
5. **Revisar logs** en caso de problemas

## üÜò **SOPORTE**

Si encuentras problemas:
1. Ejecutar comandos de validaci√≥n
2. Revisar logs en `logs/`
3. Verificar configuraci√≥n en `config/`
4. Consultar documentaci√≥n en `docs_backup/`

---

**Sistema optimizado para 50M steps con modo autonom√≠a total** üöÄ
