# =========================
# 0) Preparación entorno
# =========================
# Crear venv (una vez)
python -m venv .venv

# Activar venv (cada sesión)
.\.venv\Scripts\Activate.ps1

# Instalar dependencias
python -m pip install --upgrade pip
python -m pip install -r requirements.txt

# (Opcional) Si más adelante vas a entrenar modelos clásicos
# python -m pip install scikit-learn xgboost optuna

# (Opcional) Si vas a usar TA-Lib y tienes wheel compatible
# python -m pip install TA-Lib

# =========================
# 1) Estructura de datos
# =========================
# Crear rutas de datos si no existen
mkdir data, data\warehouse, data\warehouse\ohlcv -Force

# =========================
# 2) Descarga de históricos
# =========================
# Descarga velas 1m (símbolos definidos en config/data.yaml)
python app.py bootstrap-data

# =========================
# 3) Resample de 1m -> {5m,15m,1h,4h,1d}
# =========================
python app.py resample

# =========================
# 4) Validación de datos
# =========================
python app.py validate-data
# Logs informan: duplicados, NaNs, orden temporal, valores negativos

# =========================
# 5) Vista MTF + Features + SMC
# =========================
# Construir features técnicos en TF de ejecución (p.ej. 5m)
python app.py build-features --symbol BTCUSDT --exec-tf 5m

# Detectar SMC sobre el TF de ejecución
python app.py build-smc --symbol BTCUSDT --exec-tf 5m

# =========================
# 6) Dataset entrenable (triple-barrier)
# =========================
# horizon: nº de barras a futuro en TF de ejecución
# tp/sl en múltiplos de ATR local
python app.py build-dataset --symbol BTCUSDT --exec-tf 5m --horizon 48 --tp-k-atr 3.0 --sl-k-atr 1.0

# El dataset queda en:
# data/warehouse/features/symbol=BTCUSDT/timeframe=5m/train_dataset.parquet

# =========================
# 7) Backtest baseline (sanity check)
# =========================
python app.py backtest-baseline --symbol BTCUSDT --tf 5m

# =========================
# 8) Paper loop (event-driven mínimo)
# =========================
python app.py paper --symbol BTCUSDT --tf 5m

# =========================
# 9) Variantes rápidas
# =========================
# Cambiar símbolo
python app.py build-features --symbol ETHUSDT --exec-tf 5m
python app.py build-smc --symbol ETHUSDT --exec-tf 5m
python app.py build-dataset --symbol ETHUSDT --exec-tf 5m --horizon 48 --tp-k-atr 3.0 --sl-k-atr 1.0

# Cambiar TF de ejecución a 1m
python app.py build-features --symbol BTCUSDT --exec-tf 1m
python app.py build-smc --symbol BTCUSDT --exec-tf 1m
python app.py build-dataset --symbol BTCUSDT --exec-tf 1m --horizon 240 --tp-k-atr 3.0 --sl-k-atr 1.0

# =========================
# 10) Troubleshooting rápido
# =========================
# "No module named 'X'": asegúrate de activar el venv (.venv) antes de ejecutar
# Si pip instala en otro Python: usar el ejecutable del venv explícitamente
.\.venv\Scripts\python.exe app.py validate-data

# Permisos PowerShell (si falla la activación del venv)
# Ejecutar como admin una vez:
# Set-ExecutionPolicy -Scope CurrentUser RemoteSigned
